<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <!-- Configurações do servidor web para um aplicativo Node.js usando o IIS (Internet Information Services). -->
  <system.webServer>
    <!-- Configuração de manipuladores para processar arquivos específicos. -->
    <handlers>
      <!-- Associa o módulo `iisnode` ao arquivo `server.js`, permitindo que ele seja executado como um aplicativo Node.js. -->
      <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
    </handlers>

    <!-- Configurações de reescrita de URL para gerenciar rotas e conteúdos estáticos ou dinâmicos. -->
    <rewrite>
      <rules>
        <!-- Regra para evitar processamento adicional caso o URL corresponda a uma depuração do Node.js. -->
        <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
          <match url="^server.js\/debug[\/]?" />
        </rule>

        <!-- Regra para servir conteúdo estático da pasta `public`. -->
        <rule name="StaticContent">
          <action type="Rewrite" url="public/{R:0}" />
        </rule>

        <!-- Regra para processar requisições dinâmicas enviando-as para o arquivo `server.js`. -->
        <rule name="DynamicContent">
          <conditions>
            <!-- Verifica se o arquivo solicitado não existe. -->
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True" />
          </conditions>
          <!-- Redireciona todas as requisições dinâmicas para `server.js`. -->
          <action type="Rewrite" url="server.js" />
        </rule>
      </rules>
    </rewrite>

    <!-- Habilita o registro de logs para depuração e monitoramento do `iisnode`. -->
    <iisnode loggingEnabled="true" />
  </system.webServer>

  <!-- 
       Propósito do arquivo:
       Este arquivo de configuração é usado para hospedar um aplicativo Node.js no IIS (Internet Information Services). 
       Ele:
       1. Configura o módulo `iisnode` para processar o arquivo principal do aplicativo (`server.js`).
       2. Define regras de reescrita de URL para:
          - Servir arquivos estáticos da pasta `public`.
          - Direcionar requisições dinâmicas para o arquivo `server.js`.
          - Ignorar rotas de depuração do Node.js.
       3. Habilita o registro de logs para ajudar na depuração e monitoramento do servidor.
  -->
</configuration>
